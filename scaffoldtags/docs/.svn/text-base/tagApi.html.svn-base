<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Grails Plugins by Daiji Takamori</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="shortcut icon" href="images/shortcuticon.png" type="image/png" />

<link rel="stylesheet" href="css/main.css"></link>
</head>
<body>
<h1><img alt="[grails plugin]" src="images/grails-plugin.png" height=50 /> ScaffoldTags Tag API</h1>
<p>
<a href="index.html">Index</a>
</p>

<h3>Contents</h3>
<ul>
<li><a href="#renderDomain">&lt;g:renderDomain&gt;</a></li>
<li><a href="#eachDomainProperty">&lt;g:eachDomainProperty&gt;</a></li>
<li><a href="#renderProperty">&lt;g:renderProperty&gt;</a></li>
<li><a href="#renderRelation">&lt;g:renderRelation&gt;</a></li>
<li><a href="#eachProperty">&lt;g:eachProperty&gt;</a></li>
<li><a href="#renderType">&lt;g:renderType&gt;</a></li>
<li><a href="#renderActions">&lt;g:renderActions&gt;</a></li>
<li><a href="#renderAction">&lt;g:renderAction&gt;</a></li>
</ul>

<a name="renderDomain">
<h2>&lt;g:renderDomain&gt;</h2>
</a>
<p>
Renders a domain using customized views. The search path is: 
<ol>
<li>the current view directory;</li>
<li>a view directory for the domain class; </li>
<li>a generic view under the _domain directory.</li>
</ol>
</p>
<p>
For each search path, it first searches for the template 
{template}/{domainClassName}.gsp.
If not found, it defaults to the template {template}/domain.gsp
</p>
<h3>Parameters</h3>
<ul>
<li>domain (required) - the domain to be displayed</li>
<li>template (required) - the template to be displayed (e.g. show, edit, list)</li>
<li>name - the base name used for the HTML field name for each domain property 
(for use in editor templates)</li>
<li>value - the value of the domain object</li>
<li>style - a map indicating how to display various domain fields</li>
<li>except - a list of properties that should not be displayed.  
This parameter is overridden when the only parameter is specified.</li>
<li>exceptWhen - a closure that will eliminate some properties from being displayed.
This parameter is overridden when the only parameter is specified.</li>
<li>order - a list specifying the order of specific fields.  
This parameter is overridden when the only parameter is specified.</li>
<li>only - a list specifying the only fields that should be displayed.
The fields will be displayed in the order specified in the list.</li>
</ul>
<h3>Examples</h3>
<pre>
&lt;g:renderDomain template="describe" domain="${User}" /&gt;
&lt;g:renderDomain template="show" domain="${User}" value="${u}" /&gt;
</pre>

<a name="eachDomainProperty">
<h2>&lt;g:eachDomainProperty&gt;</h2>
</a>
<p>
Loops across the properties of a domain. Intended to be used 
inside of domain display templates invoked by 
<a href="#renderDomain">&lt;g:renderDomain&gt;</a>.  
This tag will take a domain and break it down as specified
so as to simplify further rendering operations.
</p>
<p>
The body of this tag will receive an implicit 'it' variable which 
has the following structure:
<ul>
<li>prop - a GrailsDomainClassProperty instance to pass to 
<a href="#renderProperty">&lt;g:renderProperty&gt;</a>. 
<em>Note: this may be subject to change in future releases.</em></li>
<li>name - the name of the domain property</li>
<li>value - the value of the domain property</li>
<li>style - the style to be applied to the domain property</li>
</ul>
</p>
<h3>Parameters</h3>
<ul>
<li>domain (required) - the domain to be displayed</li>
<li>name - the base name used for the HTML field name for each domain property 
(for use in editor templates)</li>
<li>value - the value of the domain object.</li>
<li>style - a map indicating how to display various domain fields.  
It is a map of field name to the child style map.</li>
<li>except - a list of properties that should not be displayed.  
This parameter is overridden when the only parameter is specified.</li>
<li>exceptWhen - a closure that will eliminate some properties from being displayed.
This parameter is overridden when the only parameter is specified.</li>
<li>order - a list specifying the order of specific fields.  
This parameter is overridden when the only parameter is specified.</li>
<li>only - a list specifying the only fields that should be displayed.
The fields will be displayed in the order specified in the list.</li>
</ul>
<h3>Examples</h3>
<pre>
&lt;g:eachDomainProperty domain="User"&gt;${it.descriptor.name}&lt;/g:eachDomainProperty&gt;

&lt;g:eachDomainProperty domain="User" value="${u}" except="${it.name = 'password'}"&gt;
	${it.prop.name}: ${it.value}
&lt;/g:eachDomainProperty&gt;

&lt;g:eachDomainProperty domain="User" value="${u}" except="${it.name = 'password'}"&gt;
	&lt;g:renderProperty prop="${it.prop}" /&gt;
&lt;/g:eachDomainProperty&gt;
</pre>

<a name="renderProperty">
<h2>&lt;g:renderProperty&gt;</h2>
</a>
<p>
Renders a domain property using customized views. The search path is: 
<ol>
<li>the current view directory;</li>
<li>a view directory for the domain class; </li>
<li>a generic view under the _domain directory.</li>
</ol>
</p>
<p>
For each search path, it first searches for the template 
{template}/{domain}.{propertyName}.gsp.
If not found, it invokes either 
<a href="#renderRelation">&lt;g:renderRelation&gt;</a>
or
<a href="#renderType">&lt;g:renderType&gt;</a>.
</p>
<p>
Intended to be used 
inside of domain display templates invoked by 
<a href="#renderDomain">&lt;g:renderDomain&gt;</a>.  
</p>
<h3>Parameters</h3>
<ul>
<li>template (required) - the template to be displayed (e.g. show, edit, list)</li>
<li>prop (required) - the property to be displayed</li>
<li>domain - the domain to be displayed</li>
<li>name - the base name used for the HTML field name for each domain property 
(for use in editor templates)</li>
<li>value - the value of the domain object</li>
<li>style - a map indicating how to display various domain fields</li>
<li>domainId - id of the containing domain instance.  Used where 
a controller action link to create an associated object is displayed.</li>
</ul>
<h3>Examples</h3>
<pre>
&lt;g:renderProperty template="describe" domain="${User}" prop="${p}" /&gt;
&lt;g:renderProperty template="show" domain="${User}" prop="${p}" value="${u}" /&gt;
</pre>

<a name="renderRelation">
<h2>&lt;g:renderRelation&gt;</h2>
</a>
<p>
Renders a domain relation property using customized views. The search path is: 
<ol>
<li>the current view directory;</li>
<li>a view directory for the domain class; </li>
<li>a generic view under the _domain directory.</li>
</ol>
</p>
<p>
For each search path, it searches for templates in the following order:
<ol>
<li>{template}/${relation}_{type}.gsp</li>
<li>{template}/${relation}.gsp</li>
</ol>
where relation is:
<ul>
<li>for one-to-one relationships: "one-one", defaulting to "one"</li>
<li>for one-to-many relationships: "one-many", defaulting to "many"</li>
<li>for many-to-one relationships: "many-one", defaulting to "one"</li>
<li>for many-to-many relationships: "many-many", defaulting to "many"</li>
</ul>
and type is the best-matching class found (using the class inheritance chain).
<em>Note: currently this doesn't support interface-based templates</em>
</p>
<p>
Intended to be used 
inside of domain display templates invoked by 
<a href="#renderDomain">&lt;g:renderDomain&gt;</a>.  
</p>
<h3>Parameters</h3>
<ul>
<li>template (required) - the template to be displayed (e.g. show, edit, list)</li>
<li>prop (required) - the property to be displayed</li>
<li>domain - the domain to be displayed</li>
<li>name - the base name used for the HTML field name for each domain property 
(for use in editor templates)</li>
<li>value - the value of the domain object</li>
<li>style - a map indicating how to display various domain fields</li>
<li>domainId - id of the containing domain instance.  Used where 
a controller action link to create an associated object is displayed.</li>
</ul>
<h3>Examples</h3>
<pre>
&lt;g:renderRelation template="edit" domain="${User}" prop="${p}" /&gt;
&lt;g:renderRelation template="show" domain="${User}" prop="${p}" value="${u}" /&gt;
</pre>

<a name="eachProperty">
<h2>&lt;g:eachProperty&gt;</h2>
</a>
<p>
Loops across the properties of a bean. Intended to be used 
inside of bean display templates invoked by 
<a href="#renderType">&lt;g:renderType&gt;</a> when 
the "embedded" widget style is used.  
This tag will take a bean and break it down as specified
so as to simplify further rendering operations.
</p>
<p>
The body of this tag will receive an implicit 'it' variable which 
has the following structure:
<ul>
<li>prop - a groovy.lang.MetaClassProperty object. 
<em>Note: this may be subject to change in future releases.</em></li>
<li>name - the name of the bean property</li>
<li>value - the value of the bean property</li>
<li>style - the style to be applied to the property</li>
</ul>
</p>
<h3>Parameters</h3>
<ul>
<li>type (required) - the type of the bean to be displayed</li>
<li>name - the base name used for the HTML field name for each property 
(for use in editor templates)</li>
<li>value - the bean to display.</li>
<li>style - a map indicating how to display various bean properties.  
It is a map of field name to the child style map.</li>
<li>except - a list of properties that should not be displayed.  
This parameter is overridden when the only parameter is specified.</li>
<li>exceptWhen - a closure that will eliminate some properties from being displayed.
This parameter is overridden when the only parameter is specified.</li>
<li>order - a list specifying the order of specific fields.  
This parameter is overridden when the only parameter is specified.</li>
<li>only - a list specifying the only fields that should be displayed.
The fields will be displayed in the order specified in the list.</li>
</ul>
<h3>Examples</h3>
<pre>
&lt;g:eachProperty type="MyBean"&gt;${it.descriptor.name}&lt;/g:eachProperty&gt;

&lt;g:eachProperty type="MyBean" value="${beanie}" except="${it.name == 'hiddenStuff'}"&gt;
    ${it.prop.name}: ${it.value}
&lt;/g:eachProperty&gt;

&lt;g:eachProperty type="MyBean" value="${beanie}" except="${it.type == Integer.class}"&gt;
    &lt;g:renderType value="${it.value}" /&gt;
&lt;/g:eachProperty&gt;
</pre>

<a name="renderType">
<h2>&lt;g:renderType&gt;</h2>
</a>
<p>
Renders a data type using customized views. The search path is: 
<ol>
<li>the current view directory;</li>
<li>a view directory for the domain class; </li>
<li>a generic view under the _domain directory.</li>
</ol>
</p>
<p>
For each search path, it searches for {template}/{type}.gsp
where type is the best-matching class found (using the class inheritance chain),
prefixed with "array_" for array values (not to be confused with lists).
<em>Note:</em> If a matching class is not found, but an interface explicitly declared 
as implemented by that class is found, then that interface is rendered.  This interface-matching
occurs for each level in the inheritance hierarchy that is examined.
</p>
<p>
Intended to either be used inside of domain display templates invoked by 
<a href="#renderDomain">&lt;g:renderDomain&gt;</a>, 
or as an independent means to display beans.  
</p>
<h3>Parameters</h3>
<ul>
<li>template (required) - the template to be displayed (e.g. show, edit, list)</li>
<li>type (required, unless value is non-null) - the class of the property to be displayed</li>
<li>domain - the domain to be displayed</li>
<li>name - the base name used for the HTML field name for each domain property 
(for use in editor templates)</li>
<li>value - the value of the domain object</li>
<li>constraints - constraints as specified in GORM</li>
<li>style - a map indicating how to display various domain fields</li>
</ul>
<h3>Examples</h3>
<pre>
&lt;g:renderType template="edit" domain="MyBean" value="${beanie}" /&gt;
&lt;g:renderType template="show" domain="${MyBean.class}" value="${beanie}" /&gt;
</pre>

<a name="renderActions">
<h2>&lt;g:renderActions&gt;</h2>
</a>
<p>
A convenience tag for rendering several domain action links using &lt;g:renderAction&gt;
</p>
<p>
Intended to be used inside of domain display templates invoked by 
<a href="#renderDomain">&lt;g:renderDomain&gt;</a>.  
</p>
<h3>Parameters</h3>
<ul>
<li>template (required) - the template to be displayed (e.g. show, edit, list)</li>
<li>actions (required) - an array of maps from actions to labels (e.g. [[show: 'Show'], [edit: 'Edit']])</li>
<li>controller - the controller upon which the action should be applied</li>
<li>item - the item to which the action applies (normally becomes the id parameter)</li>
<li>constraints - constraints as specified in GORM</li>
<li>widget - a widget style, when multiple action renderers are desired.  
Works the same as in other tags</li>
<li>style - a style map</li>
</ul>
<h3>Examples</h3>
<pre>
&lt;g:renderActions template="list" actions="[[show:'Show'], [edit: 'Edit']]" item="${item}" /&gt;
</pre>

<a name="renderAction">
<h2>&lt;g:renderAction&gt;</h2>
</a>
<p>
Renders a domain action link using customized renderers. The search path is: 
<ol>
<li>the current view directory;</li>
<li>a view directory for the domain class; </li>
<li>a generic view under the _domain directory.</li>
</ol>
</p>
<p>
For each search path, it searches for {template}/action.gsp
</p>
<p>
Intended to be used inside of domain display templates invoked by 
<a href="#renderDomain">&lt;g:renderDomain&gt;</a>.  
</p>
<h3>Parameters</h3>
<ul>
<li>template (required) - the template to be displayed (e.g. show, edit, list)</li>
<li>action (required) - the action to link (e.g. save, delete, edit)</li>
<li>label - the label to use on the action</li>
<li>controller - the controller upon which the action should be applied</li>
<li>item - the item to which the action applies (normally becomes the id parameter)</li>
<li>constraints - constraints as specified in GORM</li>
<li>widget - a widget style, when multiple action renderers are desired.  
Works the same as in other tags</li>
<li>style - a style map</li>
</ul>
<h3>Examples</h3>
<pre>
&lt;g:renderAction template="list" action="edit" label="Edit" item="${item}" /&gt;
</pre>

</body>
</html>